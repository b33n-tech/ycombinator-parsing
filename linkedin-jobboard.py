import streamlit as st
import pandas as pd
import re
from io import BytesIO

st.set_page_config(page_title="Parser Candidatures LinkedIn", layout="wide")
st.title("üìÑ LinkedIn - Parser multi-pages de candidatures")

st.markdown("""
Colle ici ton texte brut copi√© depuis LinkedIn.  
**Chaque annonce doit √™tre s√©par√©e par une ligne vide** (saut de ligne).  
Tu peux parser plusieurs pages l‚Äôune apr√®s l‚Äôautre. Les candidatures s'accumulent dans un tableau final.

Fonctionnalit√©s :
- ‚úÖ Extraction automatique : entreprise, poste, localisation, statut
- ‚úÖ Tag automatique : *Candidature d√©pos√©e*, *CV t√©l√©charg√©*, *Candidature vue*
- ‚úÖ Bouton magique : ajoute un saut de ligne apr√®s chaque statut
- ‚úÖ Export global en `.xlsx`

---
""")

# √âtat session : stockage de toutes les candidatures
if "candidatures" not in st.session_state:
    st.session_state["candidatures"] = []

# Texte brut √† coller
input_text = st.text_area("üìã Colle ici une page de candidatures LinkedIn :", height=300, key="original_text")

# Bouton magique : ajoute un saut de ligne apr√®s les statuts
if st.button("‚Ü©Ô∏è Ajouter un saut de ligne apr√®s chaque statut reconnu"):
    if not st.session_state.original_text.strip():
        st.warning("Merci de coller du texte avant d'utiliser cette fonction.")
    else:
        pattern = r"(Candidature d√©pos√©e il y a .*?|CV t√©l√©charg√© il y a .*?|Candidature vue il y a .*?)"
        corrected_text = re.sub(pattern, r"\1\n", st.session_state.original_text.strip())
        st.session_state["corrected_text"] = corrected_text
        st.text_area("‚úÖ Texte corrig√© :", corrected_text, height=300, key="text_corrig√©")
        st.info("Sauts de ligne ajout√©s apr√®s les statuts.")
    st.stop()  # Ne pas continuer le parsing dans ce cas

# Parsing du texte (corrig√© si dispo, sinon original)
if st.button("‚ûï Ajouter cette page au tableau final"):
    source_text = st.session_state.get("corrected_text", st.session_state.original_text)

    if not source_text.strip():
        st.warning("Merci de coller du texte avant de parser.")
    else:
        annonces = re.split(r"\n\s*\n", source_text.strip())
        page_rows = []

        for annonce in annonces:
            lignes = [line.strip() for line in annonce.strip().split("\n") if line.strip()]
            
            if len(lignes) >= 4:
                entreprise = lignes[0]
                poste = lignes[1]
                localisation = ""
                statut_complet = ""
                tag = ""

                for ligne in lignes:
                    if re.search(r"(Sur site|Hybride|Remote|Paris|Lyon|Area)", ligne, re.IGNORECASE):
                        localisation = ligne
                    if re.match(r"(Candidature d√©pos√©e|CV t√©l√©charg√©|Candidature vue) il y a ", ligne):
                        statut_complet = ligne
                        if ligne.startswith("Candidature d√©pos√©e"):
                            tag = "Candidature d√©pos√©e"
                        elif ligne.startswith("CV t√©l√©charg√©"):
                            tag = "CV t√©l√©charg√©"
                        elif ligne.startswith("Candidature vue"):
                            tag = "Candidature vue"

                page_rows.append({
                    "Entreprise": entreprise,
                    "Poste": poste,
                    "Localisation": localisation,
                    "Statut": statut_complet,
                    "Tag": tag
                })

        if page_rows:
            st.session_state["candidatures"].extend(page_rows)
            st.success(f"{len(page_rows)} candidatures ajout√©es.")
        else:
            st.warning("Aucune annonce valide d√©tect√©e. V√©rifie que les annonces sont bien s√©par√©es.")

# Affichage et export
if st.session_state["candidatures"]:
    st.markdown("---")
    st.subheader("üßæ Tableau cumul√© des candidatures")
    df = pd.DataFrame(st.session_state["candidatures"])
    st.dataframe(df, use_container_width=True)

    output = BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="Candidatures")
    output.seek(0)

    st.download_button(
        label="üì• T√©l√©charger en .xlsx",
        data=output,
        file_name="candidatures_linkedin.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    if st.button("üóëÔ∏è R√©initialiser toutes les candidatures"):
        st.session_state["candidatures"] = []
        st.success("Toutes les candidatures ont √©t√© r√©initialis√©es.")
