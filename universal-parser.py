import streamlit as st
import pandas as pd
from io import BytesIO

st.set_page_config(page_title="Syst√®me de Tags", layout="centered")
st.title("üè∑Ô∏è Attribution automatique de tags par mots-cl√©s")
st.markdown("T√©l√©verse un fichier Excel et applique automatiquement des tags en fonction de mots-cl√©s que tu d√©finis.")

# 1. Upload du fichier
uploaded_file = st.file_uploader("üìÇ Charge un fichier Excel (.xlsx)", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.success("Fichier charg√© avec succ√®s ‚úÖ")
    st.write("Aper√ßu des premi√®res lignes :", df.head())

    # 2. S√©lection de la colonne √† analyser
    selected_col = st.selectbox("üß© S√©lectionne la colonne √† analyser :", df.columns)

    # 3. D√©finition des tags
    st.markdown("### üèóÔ∏è Configuration des tags √† appliquer")
    nb_tags = st.slider("Nombre de tags √† d√©finir :", 1, 7, 3)

    tags_config = []
    for i in range(nb_tags):
        with st.expander(f"üìù Tag {i+1}"):
            cat = st.text_input(f"Cat√©gorie du Tag {i+1}", key=f"cat_{i}")
            name = st.text_input(f"Nom du Tag {i+1}", key=f"name_{i}")
            keywords_input = st.text_area(
                f"Mots-cl√©s d√©clencheurs (s√©par√©s par des virgules)", 
                key=f"kw_{i}",
                placeholder="ex : lyon, marseille, lille"
            )

            if cat and name and keywords_input:
                tag_label = f"{cat}/{name}"
                keywords = [kw.strip().lower() for kw in keywords_input.split(",") if kw.strip()]
                tags_config.append((tag_label, keywords))

    # 4. Application des tags
    if st.button("üöÄ Appliquer les tags"):
        result_df = df.copy()
        col_to_check = result_df[selected_col].astype(str).str.lower()

        for tag_label, keywords in tags_config:
            result_df[tag_label] = col_to_check.apply(
                lambda text: 1 if any(kw in text for kw in keywords) else 0
            )

        st.success("Tags appliqu√©s avec succ√®s üéâ")
        st.dataframe(result_df.head())

        # 5. Export XLSX
        def convert_df_to_excel(df):
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, sheet_name="Tags", index=False)
            return output.getvalue()

        excel_data = convert_df_to_excel(result_df)

        st.download_button(
            label="üì• T√©l√©charger le fichier tagg√© (.xlsx)",
            data=excel_data,
            file_name="fichier_tagg√©.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
else:
    st.info("Charge un fichier Excel pour commencer.")
