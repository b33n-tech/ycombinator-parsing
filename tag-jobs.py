import streamlit as st
import pandas as pd

# ========== TAGS & MOTS-CL√âS ==========
tags_keywords = {
    "Management": [
        "responsable", "chef de projet", "chief of staff", "coordinateur", "bras droit", "directeur", "manager",
        "program manager", "project manager", "pm", "gestion", "organisational development", "r√©f√©rent p√©dagogique",
        "chef¬∑fe de service", "chef de projets", "operations", "product owner", "strategy"
    ],
    "Commercial / Vente": [
        "commercial", "business developer", "d√©veloppement commercial", "affaires", "vente", "biz dev",
        "partenariats", "business development", "conseiller", "charg√© d'affaires", "responsable commercial",
        "price manager", "partnership manager", "business manager", "sales"
    ],
    "Marketing / Communication": [
        "communication", "marketing", "fid√©lisation", "√©v√©nementiel", "digital", "contenu", "promotion",
        "responsable communication", "campagne", "publicit√©"
    ],
    "Support / Administration": [
        "assistant", "administration", "admissions", "gestion", "support", "ressources humaines", "rh",
        "coordination", "secr√©tariat", "charg√© d'accompagnement", "charg√© de mission", "charg√© de scolarit√©",
        "charg√© de service client"
    ],
    "Technique / Ing√©nierie": [
        "consultant", "ing√©nieur", "technique", "data", "analyse", "innovation", "digital", "ia", "erp", "r&d",
        "product owner", "chef de projet digital", "chef de projet data"
    ],
    "Cr√©ation / Design": [
        "design", "cr√©ation", "animateur", "cr√©atif", "r√©daction", "ux", "ui", "animation"
    ]
}

def find_tags(title):
    if pd.isna(title):
        return "Autre"
    title_low = str(title).lower()
    found_tags = set()
    for tag, keywords in tags_keywords.items():
        for kw in keywords:
            if kw in title_low:
                found_tags.add(tag)
    return ", ".join(found_tags) if found_tags else "Autre"

# ========== STREAMLIT UI ==========
st.title("üß† Taggage automatique des intitul√©s de postes (.xlsx)")

uploaded_file = st.file_uploader("üìÇ Upload un fichier Excel (.xlsx)", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.success("‚úÖ Fichier charg√© avec succ√®s.")
    st.write("Aper√ßu des donn√©es :", df.head())

    col_options = df.columns.tolist()
    selected_col = st.selectbox("üìå S√©lectionne la colonne contenant les intitul√©s de postes :", col_options)

    if st.button("üè∑Ô∏è G√©n√©rer les tags"):
        df["Tags"] = df[selected_col].apply(find_tags)
        st.write("‚úÖ Tags g√©n√©r√©s :")
        st.dataframe(df[[selected_col, "Tags"]])

        # Fichier t√©l√©chargeable
        @st.cache_data
        def convert_df_to_excel(df):
            from io import BytesIO
            output = BytesIO()
            with pd.ExcelWriter(output, engine="openpyxl") as writer:
                df.to_excel(writer, index=False)
            return output.getvalue()

        st.download_button(
            label="üì• T√©l√©charger le fichier avec tags",
            data=convert_df_to_excel(df),
            file_name="fichier_taggu√©.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
