import streamlit as st
import pandas as pd
import re
from io import BytesIO

st.set_page_config(page_title="Universal Project Parser", layout="wide")
st.title("üß† Universal Project Parser")

st.markdown("""
Cet outil vous permet de parser un texte brut copi√© depuis un site web listant des projets, en extrayant automatiquement les informations selon les exemples que vous fournissez.

### √âtapes :
1. D√©finissez les cat√©gories d'information souhait√©es (ex : Nom du projet, Pitch, Tags, Date, etc.).
2. Donnez pour chaque cat√©gorie **un exemple pr√©cis**.
3. Copiez-collez l'ensemble du texte brut contenant plusieurs projets.
4. L'outil applique la logique aux blocs similaires.
5. T√©l√©chargez le tableau `.xlsx` g√©n√©r√©.
""")

# Step 1: D√©finition des cat√©gories
st.subheader("1. D√©finir les cat√©gories et exemples")
category_count = st.number_input("Combien de types d'information voulez-vous extraire ?", min_value=1, max_value=10, value=3, step=1)

categories = []
examples = []

for i in range(category_count):
    col1, col2 = st.columns(2)
    with col1:
        category = st.text_input(f"Nom de la cat√©gorie #{i+1}", key=f"cat_{i}")
    with col2:
        example = st.text_input(f"Exemple correspondant √† cette cat√©gorie", key=f"ex_{i}")
    if category and example:
        categories.append(category.strip())
        examples.append(example.strip())

# Step 2: Texte complet √† parser
st.subheader("2. Copier-coller le texte contenant tous les projets")
raw_text = st.text_area("Texte brut copi√© depuis un site web", height=400)

# Step 3: Lancer le parsing
st.subheader("3. R√©sultat et export")
if st.button("Lancer le parsing"):
    if not raw_text or not categories or not examples:
        st.error("Veuillez remplir tous les champs n√©cessaires.")
    else:
        # Construction des regex dynamiques √† partir des exemples
        lines = raw_text.splitlines()

        blocks = []
        block = []
        for line in lines:
            if line.strip() == "":
                if block:
                    blocks.append("\n".join(block))
                    block = []
            else:
                block.append(line.strip())
        if block:
            blocks.append("\n".join(block))

        df = pd.DataFrame(columns=categories)

        for b in blocks:
            row = {}
            for cat, ex in zip(categories, examples):
                pattern = re.escape(ex)
                match = re.search(pattern, b, flags=re.IGNORECASE)
                if match:
                    row[cat] = match.group()
                else:
                    row[cat] = ""
            df.loc[len(df)] = row

        st.dataframe(df)

        # Export as XLSX
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='Parsed')
            writer.save()
            processed_data = output.getvalue()

        st.download_button(
            label="üì• T√©l√©charger le fichier Excel",
            data=processed_data,
            file_name="parsed_projects.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
