import streamlit as st
import pandas as pd
import re
from io import BytesIO

st.title("üß† Universal Project Parser ‚Äî Version guid√©e")
st.markdown("Cr√©ez votre propre sch√©ma de parsing en fournissant les cat√©gories et des exemples pour chacune.")

st.header("üõ†Ô∏è √âtape 1 ‚Äî D√©finir les cat√©gories")

num_fields = st.number_input("Combien de types d'information voulez-vous extraire ?", min_value=1, max_value=10, value=3)

field_configs = []
field_keys = [f"field_{i}" for i in range(num_fields)]

with st.form("field_definition_form"):
    for i, key in enumerate(field_keys):
        st.subheader(f"Cat√©gorie #{i+1}")
        name = st.text_input(f"Nom de la cat√©gorie {i+1}", key=f"name_{key}")
        ex1 = st.text_input(f"Exemple 1", key=f"ex1_{key}")
        ex2 = st.text_input(f"Exemple 2", key=f"ex2_{key}")
        ex3 = st.text_input(f"Exemple 3", key=f"ex3_{key}")
        field_configs.append({"name": name, "examples": [ex1, ex2, ex3]})

    submitted = st.form_submit_button("‚úÖ Confirmer les cat√©gories")

# Fonction de d√©tection par similarit√© na√Øve
def find_matching_field(line, field_configs):
    for config in field_configs:
        for example in config["examples"]:
            if example and example.lower() in line.lower():
                return config["name"]
    return None

if submitted:
    st.success("Cat√©gories enregistr√©es. Passez √† l'√©tape suivante.")

    st.header("üìã √âtape 2 ‚Äî Coller le texte √† parser")
    raw_text = st.text_area("Texte √† analyser", height=400)

    if st.button("üöÄ Lancer le parsing") and raw_text:
        lines = [l.strip() for l in raw_text.strip().split("\n") if l.strip()]
        parsed_rows = []
        current_row = {config["name"]: "" for config in field_configs}

        for line in lines:
            matched_field = find_matching_field(line, field_configs)
            if matched_field:
                # Si la case est vide, on ajoute
                if current_row[matched_field] == "":
                    current_row[matched_field] = line
                else:
                    # Sinon on consid√®re que c'est un nouveau projet
                    parsed_rows.append(current_row)
                    current_row = {config["name"]: "" for config in field_configs}
                    current_row[matched_field] = line

        if any(v != "" for v in current_row.values()):
            parsed_rows.append(current_row)

        if parsed_rows:
            df = pd.DataFrame(parsed_rows)
            st.success(f"‚úÖ {len(df)} entr√©es d√©tect√©es.")
            st.dataframe(df, use_container_width=True)

            def convert_df_to_excel(df):
                output = BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    df.to_excel(writer, index=False, sheet_name='Projets')
                return output.getvalue()

            excel_data = convert_df_to_excel(df)
            st.download_button(
                label="üì• T√©l√©charger en Excel",
                data=excel_data,
                file_name="projets_pars√©s.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.warning("Aucune entr√©e d√©tect√©e. Veuillez v√©rifier vos exemples et votre texte.")
